generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  products    Product[]
}

model Product {
  id             String   @id @default(cuid())
  name           String
  description    String
  price          Float
  crossedPrice   Float
  stock          Int
  status         String
  categoryId     String
  images         String[]
  specifications Json
  variants       Json
  createdAt      DateTime @default(now())
  reviews        Review[]

  category Category @relation(fields: [categoryId], references: [id])
}

model Banner {
  id        String   @id @default(cuid())
  title     String
  image     String
  ctaText   String
  ctaLink   String
  fileId    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Order {
  id          String       @id @default(cuid())
  userId      String?
  customer    Json // delivery info at the time of order
  items       Json // [{ productId, name, price, quantity }]
  total       Int
  status      OrderStatus  @default(Pending)
  paymentType PaymentType? // cod, esewa, etc.
  createdAt   DateTime     @default(now())

  user User? @relation(fields: [userId], references: [id])
}

enum PaymentType {
  COD
  ESEWA
  FONEPAY
  KHALTI
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model AdminUser {
  id          String               @id @default(cuid())
  email       String               @unique
  password    String
  createdAt   DateTime             @default(now())
  resetTokens PasswordResetToken[]
}

model PasswordResetToken {
  id          String    @id @default(cuid())
  adminUserId String
  token       String    @unique
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  adminUser   AdminUser @relation(fields: [adminUserId], references: [id])
}

enum ProductStatus {
  Published
  Draft
}

enum OrderStatus {
  Pending
  Paid
  Shipped
  Cancelled
  Created
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  password  String? // if you're not using OAuth
  orders    Order[]
  role      Role     @default(USER)
  review    Review[]
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  USER
}
