generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  description   String
  createdAt     DateTime      @default(now())
  products      Product[]
  subcategories Subcategory[]   // uses model below
}

model Subcategory {
  id           String     @id @default(cuid())
  name         String
  categoryId   String
  createdAt    DateTime   @default(now())

  category     Category   @relation(fields: [categoryId], references: [id])
  products     Product[]
}

model Product {
  id             String     @id @default(cuid())
  name           String
  description    String
  price          Float
  crossedPrice   Float
  stock          Int
  status         String
  categoryId     String
  subcategoryId  String?
  images         String[]
  specifications Json
  variants       Json
  createdAt      DateTime   @default(now())
  reviews        Review[]

  category       Category   @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory? @relation(fields: [subcategoryId], references: [id])
}

model Banner {
  id        String   @id @default(cuid())
  title     String
  image     String
  ctaText   String
  ctaLink   String
  fileId    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Order {
  id          String       @id @default(cuid())
  userId      String?
  customer    Json
  items       Json
  total       Int
  status      OrderStatus  @default(Pending)
  paymentStatus PaymentStatus @default(Unpaid)
  paymentType PaymentType?
  createdAt   DateTime     @default(now())

  user   User?   @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  phone          String?
  passwordHash   String?
  role           Role      @default(USER)
  orders         Order[]
  review         Review[]
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime  @default(now())
}



model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

enum ProductStatus {
  Published
  Draft
}

enum OrderStatus {
  Pending
  Confirmed
  Shipped
  Cancelled
  Created
}

enum PaymentStatus {
  Paid
  Unpaid
}

enum PaymentType {
  COD
  ESEWA
  FONEPAY
  KHALTI
}

enum Role {
  ADMIN
  USER
}

